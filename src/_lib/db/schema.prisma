generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // included for this winner project
  phoneNumber String?
  accessType  EnumAccessType?
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Collaborator {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phoneNumber String
  document    String   @unique
  bankCode    String?
  bankName    String?
  agency      String?
  account     String?
  meiNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tests            Exam[]
  testSupervisors  ExamSupervisor[]
  testInvigilators ExamInvigilator[]
  testSpeakings    ExamSpeaking[]

  banks  Banks?  @relation(fields: [bankId], references: [id])
  bankId String?
}

model Venue {
  id         String   @id @default(uuid())
  name       String
  address    String
  number     String
  city       String
  district   String
  state      String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ExamValue {
  id        String   @id @default(uuid())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id              String   @id @default(uuid())
  idVenue         String
  date            DateTime
  testDescription String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId String
}

model ExamSupervisor {
  id             String   @id @default(uuid())
  idExam         String
  idCollaborator String
  qtyHours       Float
  extraValue     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId String
}

model ExamInvigilator {
  id             String   @id @default(uuid())
  idExam         String
  idCollaborator String
  qtyHours       Float
  extraValue     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId String
}

model ExamSpeaking {
  id             String   @id @default(uuid())
  idExam         String
  idCollaborator String
  idExamValue    String
  examValue      Float
  qtyHours       Float
  extraValue     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId String
}

model Banks {
  id   String @id @default(uuid())
  code Int
  name String

  collaborators Collaborator[]
}

enum EnumAccessType {
  Administrator
  Supervisor
  Invigilator
  Speaking
}
